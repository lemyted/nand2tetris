// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(
        in=load, 
        sel[0..2]=address[3..5], 
        a=loadToRAM80, 
        b=loadToRAM81, 
        c=loadToRAM82, 
        d=loadToRAM83, 
        e=loadToRAM84, 
        f=loadToRAM85, 
        g=loadToRAM86, 
        h=loadToRAM87
    );
    
    RAM8(in[0..15]=in[0..15], load=loadToRAM80, address[0..2]=address[0..2], out=outRAM80);
    RAM8(in[0..15]=in[0..15], load=loadToRAM81, address[0..2]=address[0..2], out=outRAM81);
    RAM8(in[0..15]=in[0..15], load=loadToRAM82, address[0..2]=address[0..2], out=outRAM82);
    RAM8(in[0..15]=in[0..15], load=loadToRAM83, address[0..2]=address[0..2], out=outRAM83);
    RAM8(in[0..15]=in[0..15], load=loadToRAM84, address[0..2]=address[0..2], out=outRAM84);
    RAM8(in[0..15]=in[0..15], load=loadToRAM85, address[0..2]=address[0..2], out=outRAM85);
    RAM8(in[0..15]=in[0..15], load=loadToRAM86, address[0..2]=address[0..2], out=outRAM86);
    RAM8(in[0..15]=in[0..15], load=loadToRAM87, address[0..2]=address[0..2], out=outRAM87);

    Mux8Way16(
        a[0..15]=outRAM80, 
        b[0..15]=outRAM81, 
        c[0..15]=outRAM82, 
        d[0..15]=outRAM83, 
        e[0..15]=outRAM84, 
        f[0..15]=outRAM85, 
        g[0..15]=outRAM86, 
        h[0..15]=outRAM87, 
        sel[0..2]=address[3..5], 
        out[0..15]=out[0..15]
    );
}